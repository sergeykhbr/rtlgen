// 
//  Copyright 2025 Sergey Khabarov, sergeykhbr@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// 

#include "pcie_dma.h"

pcie_dma::pcie_dma(GenObject *parent, const char *name, const char *comment) :
    ModuleObject(parent, "pcie_dma", name, comment),
    i_sys_nrst(this, "i_sys_nrst", "1", "System Reset: active LOW"),
    i_sys_clk(this, "i_sys_clk", "1", "System bus clock"),
    i_pcie_usr_rst(this, "i_pcie_usr_rst", "1", "PCIE user rest: active HIGH"),
    i_pcie_usr_clk(this, "i_pcie_usr_clk", "1", "PCIE clock generated by end-point"),
    _text0_(this, "PCIE EP - DMA engine interface"),
    i_pcie_dmai(this, "i_pcie_dmai", "PCIE-EP to system DMA requests"),
    o_pcie_dmao(this, "o_pcie_dmao", "System DMA responds to PCIE EP"),
    _text1_(this, "DMA engine interface - System on Chip interface"),
    o_xmst_cfg(this, "o_xmst_cfg", "PCIE DMA master interface descriptor"),
    i_xmsti(this, "i_xmsti"),
    o_xmsto(this, "o_xmsto"),
    // params
    TXFIFO_WIDTH(this, "TXFIFO_WIDTH", &CALCWIDTHx(3, &i_pcie_dmai.tx_data,
                                                      &i_pcie_dmai.tx_strob,
                                                      &i_pcie_dmai.tx_last)),
    RXFIFO_WIDTH(this, "RXFIFO_WIDTH", &CALCWIDTHx(2, &o_pcie_dmao.rx_data,
                                                      &o_pcie_dmao.rx_last)),
    // signals
    wb_txfifo_payload_i(this, "wb_txfifo_payload_i", "TXFIFO_WIDTH"),
    wb_txfifo_payload_o(this, "wb_txfifo_payload_o", "TXFIFO_WIDTH"),
    w_txfifo_full(this, "w_txfifo_full", "1"),
    w_txfifo_empty(this, "w_txfifo_empty", "1"),
    w_txfifo_rd(this, "w_txfifo_rd", "1"),
    wb_rxfifo_payload_i(this, "wb_rxfifo_payload_i", "RXFIFO_WIDTH"),
    wb_rxfifo_payload_o(this, "wb_rxfifo_payload_o", "RXFIFO_WIDTH"),
    w_rxfifo_full(this, "w_rxfifo_full", "1"),
    w_rxfifo_empty(this, "w_rxfifo_empty", "1"),
    w_rxfifo_wr(this, "w_rxfifo_wr", "1"),
    // registers
    //
    comb(this),
    txfifo(this, "txfifo"),
    rxfifo(this, "rxfifo")
{
    Operation::start(this);

    TEXT("PCIE EP -> DMA");
    txfifo.abits.setObjValue(SCV_get_cfg_type(this, "CFG_PCIE_DMAFIFO_DEPTH"));
    txfifo.dbits.setObjValue(&TXFIFO_WIDTH);
    NEW(txfifo, txfifo.getName().c_str());
        CONNECT(txfifo, 0, txfifo.i_wclk, i_pcie_usr_clk);
        CONNECT(txfifo, 0, txfifo.i_wrstn, i_sys_nrst);
        CONNECT(txfifo, 0, txfifo.i_wr, i_pcie_dmai.tx_valid);
        CONNECT(txfifo, 0, txfifo.i_wdata, wb_txfifo_payload_i);
        CONNECT(txfifo, 0, txfifo.o_wfull, w_txfifo_full);
        CONNECT(txfifo, 0, txfifo.i_rclk, i_sys_clk);
        CONNECT(txfifo, 0, txfifo.i_rrstn, i_sys_nrst);
        CONNECT(txfifo, 0, txfifo.i_rd, w_txfifo_rd);
        CONNECT(txfifo, 0, txfifo.o_rdata, wb_txfifo_payload_o);
        CONNECT(txfifo, 0, txfifo.o_rempty, w_txfifo_empty);
    ENDNEW();

    TEXT("DMA -> PCIE EP");
    rxfifo.abits.setObjValue(SCV_get_cfg_type(this, "CFG_PCIE_DMAFIFO_DEPTH"));
    rxfifo.dbits.setObjValue(&RXFIFO_WIDTH);
    NEW(rxfifo, rxfifo.getName().c_str());
        CONNECT(rxfifo, 0, rxfifo.i_wclk, i_pcie_usr_clk);
        CONNECT(rxfifo, 0, rxfifo.i_wrstn, i_sys_nrst);
        CONNECT(rxfifo, 0, rxfifo.i_wr, w_rxfifo_wr);
        CONNECT(rxfifo, 0, rxfifo.i_wdata, wb_rxfifo_payload_i);
        CONNECT(rxfifo, 0, rxfifo.o_wfull, w_rxfifo_full);
        CONNECT(rxfifo, 0, rxfifo.i_rclk, i_sys_clk);
        CONNECT(rxfifo, 0, rxfifo.i_rrstn, i_sys_nrst);
        CONNECT(rxfifo, 0, rxfifo.i_rd, i_pcie_dmai.rx_ready);
        CONNECT(rxfifo, 0, rxfifo.o_rdata, wb_rxfifo_payload_o);
        CONNECT(rxfifo, 0, rxfifo.o_rempty, w_rxfifo_empty);
    ENDNEW();

    Operation::start(&comb);
    proc_comb();
}

void pcie_dma::proc_comb() {
    types_amba* cfg = glob_types_amba_;

    SETVAL(comb.vb_xmst_cfg.descrsize, glob_pnp_cfg_->PNP_CFG_DEV_DESCR_BYTES);
    SETVAL(comb.vb_xmst_cfg.descrtype, glob_pnp_cfg_->PNP_CFG_TYPE_MASTER);
    SETVAL(comb.vb_xmst_cfg.vid, glob_pnp_cfg_->VENDOR_OPTIMITECH);
    SETVAL(comb.vb_xmst_cfg.did, glob_pnp_cfg_->OPTIMITECH_PCIE_DMA);

TEXT();
    TEXT("TxFIFO inputs/outputs:");
    SETVAL(wb_txfifo_payload_i, CCx(3, &i_pcie_dmai.tx_data,
                                       &i_pcie_dmai.tx_strob,
                                       &i_pcie_dmai.tx_last));
TEXT();
    SPLx(wb_txfifo_payload_i, 3, &comb.vb_tx_data,
                                 &comb.vb_tx_strob,
                                 &comb.v_tx_last);

TEXT();
    TEXT("RxFIFO inputs/outputs:");
    SETVAL(wb_rxfifo_payload_i, CCx(2, &comb.vb_rx_data,
                                       &comb.v_rx_last));
TEXT();
    SPLx(wb_rxfifo_payload_o, 2, &o_pcie_dmao.rx_data,
                                 &o_pcie_dmao.rx_last);

TEXT();
    SETVAL(o_pcie_dmao.rx_valid, INV(w_rxfifo_empty));
    SETVAL(o_pcie_dmao.tx_ready, INV(w_txfifo_full));
    SETVAL(o_pcie_dmao.busy, CONST("0", 1));
    SETVAL(w_txfifo_rd, CONST("1", 1));
    SETVAL(o_xmst_cfg, comb.vb_xmst_cfg);
    SETVAL(o_xmsto, cfg->axi4_master_out_none);
}
