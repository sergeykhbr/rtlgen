// 
//  Copyright 2022 Sergey Khabarov, sergeykhbr@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// 

#include "types_pnp.h"

types_pnp::types_pnp(GenObject *parent) :
    FileObject(parent, "types_pnp"),
    autoincr_(0),
    _vid1_(this, "@name Vendor IDs defintion."),
    VENDOR_GNSSSENSOR(this, "VENDOR_GNSSSENSOR", "16", "0x00F1", NO_COMMENT),
    VENDOR_OPTIMITECH(this, "VENDOR_OPTIMITECH", "16", "0x00F2", NO_COMMENT),
    _didmst0_(this),
    _didmst1_(this, "@name Master Device IDs definition:"),
    _didmst2_(this, "Empty master slot device"),
    MST_DID_EMPTY(this, "MST_DID_EMPTY", "16", "0x7755", NO_COMMENT),
    _didmst5_(this, "\"River\" CPU Device ID."),
    RISCV_RIVER_CPU(this, "RISCV_RIVER_CPU", "16", "0x0505", NO_COMMENT),
    _didmst6_(this, "\"Wasserfall\" CPU Device ID."),
    RISCV_RIVER_WORKGROUP(this, "RISCV_RIVER_WORKGROUP", "16", "0x0506", NO_COMMENT),
    _didmst7_(this, "UART with DMA: Test Access Point (TAP)"),
    GNSSSENSOR_UART_TAP(this, "GNSSSENSOR_UART_TAP", "16", "0x050A", NO_COMMENT),
    _didmst8_(this, "JTAG Test Access Point (TAP) with SBA interface (DMA without progbuf)"),
    OPTIMITECH_JTAG_SBA(this, "OPTIMITECH_JTAG_SBA", "16", "0x050B", NO_COMMENT),
    _didmst9_(this, "PCIE DMA engine"),
    OPTIMITECH_PCIE_DMA(this, "OPTIMITECH_PCIE_DMA", "16", "0x050C", NO_COMMENT),
    _didmst10_(this, "HDMI DMA engine"),
    OPTIMITECH_HDMI_DMA(this, "OPTIMITECH_HDMI_DMA", "16", "0x050D", NO_COMMENT),
    _didslv0_(this),
    _didslv1_(this, "@name Slave Device IDs definition:"),
    _didslv2_(this, "Empty slave slot device"),
    SLV_DID_EMPTY(this, "SLV_DID_EMPTY", "16", "0x5577", NO_COMMENT),
    _didslv3_(this, "Boot ROM Device ID"),
    OPTIMITECH_ROM(this, "OPTIMITECH_ROM", "16", "0x0071", NO_COMMENT),
    _didslv4_(this, "Internal SRAM block Device ID"),
    OPTIMITECH_SRAM(this, "OPTIMITECH_SRAM", "16", "0x0073", NO_COMMENT),
    _didslv5_(this, "Configuration Registers Module"),
    OPTIMITECH_PNP(this, "OPTIMITECH_PNP", "16", "0x0074", NO_COMMENT),
    _didslv6_(this, "SD-card controller"),
    OPTIMITECH_SPI_FLASH(this, "OPTIMITECH_SPI_FLASH", "16", "0x0075", NO_COMMENT),
    _didslv7_(this, "General purpose IOs"),
    OPTIMITECH_GPIO(this, "OPTIMITECH_GPIO", "16", "0x0076", NO_COMMENT),
    _didslv8_(this, "rs-232 UART Device ID"),
    OPTIMITECH_UART(this, "OPTIMITECH_UART", "16", "0x007a", NO_COMMENT),
    _didslv9_(this, "Core local interrupt controller"),
    OPTIMITECH_CLINT(this, "OPTIMITECH_CLINT", "16", "0x0083", NO_COMMENT),
    _didslv10_(this, "External interrupt controller"),
    OPTIMITECH_PLIC(this, "OPTIMITECH_PLIC", "16", "0x0084", NO_COMMENT),
    _didslv11_(this, "AXI to APB Brdige"),
    OPTIMITECH_AXI2APB_BRIDGE(this, "OPTIMITECH_AXI2APB_BRIDGE", "16", "0x0085", NO_COMMENT),
    _didslv12_(this, "AXI interconnect"),
    OPTIMITECH_AXI_INTERCONNECT(this, "OPTIMITECH_AXI_INTERCONNECT", "16", "0x0086", NO_COMMENT),
    _didslv13_(this, "APB PLL and Register Interface"),
    OPTIMITECH_PRCI(this, "OPTIMITECH_PRCI", "16", "0x0087", NO_COMMENT),
    _didslv14_(this, "DDR controller status registers"),
    OPTIMITECH_DDRCTRL(this, "OPTIMITECH_DDRCTRL", "16", "0x0088", NO_COMMENT),
    _didslv15_(this, "SD-card controller control registers"),
    OPTIMITECH_SDCTRL_REG(this, "OPTIMITECH_SDCTRL_REG", "16", "0x0089", NO_COMMENT),
    _didslv16_(this, "SD-card controller memory"),
    OPTIMITECH_SDCTRL_MEM(this, "OPTIMITECH_SDCTRL_MEM", "16", "0x008b", NO_COMMENT),
    _didslv17_(this, "RIVER debug registers:"),
    OPTIMITECH_RIVER_DMI(this, "OPTIMITECH_RIVER_DMI", "16", "0x008a", NO_COMMENT),
    _didslv18_(this, "PCIE end-point APB controller:"),
    OPTIMITECH_PCIE_CTRL(this, "OPTIMITECH_PCIE_CTRL", "16", "0x008c", NO_COMMENT),
    _didslv19_(this, "I2C master interface meant for ADV7511 HDMI transmitter"),
    OPTIMITECH_I2C(this, "OPTIMITECH_I2C", "16", "0x008d", NO_COMMENT),
    _pnpcfg0_(this),
    _pnpcfg1_(this, "Plug'n'Play descriptor localparams."),
    _pnpcfg2_(this, "Undefined type of the descriptor (empty device)."),
    PNP_CFG_TYPE_INVALID(this, "PNP_CFG_TYPE_INVALID", "2", "0x0", NO_COMMENT),
    _pnpcfg3_(this, "AXI slave device standard descriptor."),
    PNP_CFG_TYPE_MASTER(this, "PNP_CFG_TYPE_MASTER", "2", "0x1", NO_COMMENT),
    _pnpcfg4_(this, "AXI master device standard descriptor."),
    PNP_CFG_TYPE_SLAVE(this, "PNP_CFG_TYPE_SLAVE", "2", "0x2", NO_COMMENT),
    _pnpcfg5_(this, "@brief Size in bytes of the standard slave descriptor.."),
    _pnpcfg6_(this, "@details Firmware uses this value instead of sizeof(slave_config_type)."),
    PNP_CFG_DEV_DESCR_BYTES(this, "PNP_CFG_DEV_DESCR_BYTES", "8", "0x10", NO_COMMENT),
    _pnp2_(this),
    _pnp3_(this, "@brief   Plug-n-play descriptor structure for connected device."),
    _pnp4_(this, "@details Each device must generates this datatype output that"),
    _pnp5_(this, "         is connected directly to the 'pnp' slave module on system bus."),
    dev_config_type_def_(this, "dev_config_type", NO_COMMENT),
    _pnp6_(this),
    _pnp7_(this, "@brief Default config value for empty slot."),
    dev_config_none(this, "dev_config_none", NO_COMMENT),
    _pnp0_(this),
    _pnp1_(this, "Plug-and-Play device descriptors array connected to pnp module:"),
    SOC_PNP_XCTRL0(this, "SOC_PNP_XCTRL0", autoincr_++),
    SOC_PNP_GROUP0(this, "SOC_PNP_GROUP0", autoincr_++),
    SOC_PNP_BOOTROM(this, "SOC_PNP_BOOTROM", autoincr_++),
    SOC_PNP_SRAM(this, "SOC_PNP_SRAM", autoincr_++),
    SOC_PNP_DDR_AXI(this, "SOC_PNP_DDR_AXI", autoincr_++),
    SOC_PNP_DDR_APB(this, "SOC_PNP_DDR_APB", autoincr_++),
    SOC_PNP_PRCI(this, "SOC_PNP_PRCI", autoincr_++),
    SOC_PNP_GPIO(this, "SOC_PNP_GPIO", autoincr_++),
    SOC_PNP_CLINT(this, "SOC_PNP_CLINT", autoincr_++),
    SOC_PNP_PLIC(this, "SOC_PNP_PLIC", autoincr_++),
    SOC_PNP_PNP(this, "SOC_PNP_PNP", autoincr_++),
    SOC_PNP_PBRIDGE0(this, "SOC_PNP_PBRIDGE0", autoincr_++),
    SOC_PNP_DMI(this, "SOC_PNP_DMI", autoincr_++),
    SOC_PNP_UART1(this, "SOC_PNP_UART1", autoincr_++),
    SOC_PNP_SDCTRL_REG(this, "SOC_PNP_SDCTRL_REG", autoincr_++),
    SOC_PNP_SDCTRL_MEM(this, "SOC_PNP_SDCTRL_MEM", autoincr_++),
    SOC_PNP_I2C(this, "SOC_PNP_I2C", autoincr_++),
    SOC_PNP_PCIE_DMA(this, "SOC_PNP_PCIE_DMA", autoincr_++),
    SOC_PNP_PCIE_APB(this, "SOC_PNP_PCIE_APB", autoincr_++),
    SOC_PNP_HDMI_DMA(this, "SOC_PNP_HDMI_DMA", autoincr_++),
    SOC_PNP_TOTAL(this, "SOC_PNP_TOTAL", autoincr_),
    _pnp8_(this),
    soc_pnp_vector_def_(this, "soc_pnp_vector", NO_COMMENT),
    _n_(this)
{
}

