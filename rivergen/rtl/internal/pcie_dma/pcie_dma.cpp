// 
//  Copyright 2025 Sergey Khabarov, sergeykhbr@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// 

#include "pcie_dma.h"

pcie_dma::pcie_dma(GenObject *parent, const char *name, const char *comment) :
    ModuleObject(parent, "pcie_dma", name, comment),
    i_nrst(this, "i_nrst", "1", "System Reset: active LOW"),
    i_clk(this, "i_clk", "1", "System bus clock"),
    i_pcie_phy_clk(this, "i_pcie_phy_clk", "1", "PCIE clock generated by end-point"),
    _text0_(this, "PCIE EP - DMA engine interface"),
    i_pcie_completer_id(this, "i_pcie_completer_id", "16", "Bus, Device, Function"),
    o_dma_state(this, "o_dma_state", "4", "State machine debug output, connected to APB controller"),
    i_pcie_dmai(this, "i_pcie_dmai", "PCIE-EP to system DMA requests"),
    o_pcie_dmao(this, "o_pcie_dmao", "System DMA responds to PCIE EP"),
    _text1_(this, "DMA engine interface - System on Chip interface"),
    o_xmst_cfg(this, "o_xmst_cfg", "PCIE DMA master interface descriptor"),
    i_xmsti(this, "i_xmsti"),
    o_xmsto(this, "o_xmsto"),
    _text2_(this, "Debug signals:"),
    o_dbg_mem_valid(this, "o_dbg_mem_valid", "1"),
    o_dbg_mem_wren(this, "o_dbg_mem_wren", "1"),
    o_dbg_mem_wstrb(this, "o_dbg_mem_wstrb", "8"),
    o_dbg_mem_addr(this, "o_dbg_mem_addr", "13"),
    o_dbg_mem_data(this, "o_dbg_mem_data", "32"),
    // params
    _fmt0_(this, ""),
    C_DATA_WIDTH(this, "C_DATA_WIDTH", "64", NO_COMMENT),
    KEEP_WIDTH(this, "KEEP_WIDTH", "DIV(C_DATA_WIDTH,8)", NO_COMMENT),
    _fifo0_(this, ""),
    REQ_FIFO_WIDTH(this, "REQ_FIFO_WIDTH", &CALCWIDTHx(6, &i_pcie_dmai.bar_hit,
                                                          &i_pcie_dmai.ecrc_err,
                                                          &i_pcie_dmai.err_fwd,
                                                          &i_pcie_dmai.last,
                                                          &i_pcie_dmai.strob,
                                                          &i_pcie_dmai.data)),
    RESP_FIFO_WIDTH(this, "RESP_FIFO_WIDTH", &CALCWIDTHx(3, &o_pcie_dmao.last,
                                                            &o_pcie_dmao.strob,
                                                            &o_pcie_dmao.data)),
    // signals
    w_pcie_dmai_valid(this, "w_pcie_dmai_valid", "1", "SystemC workaround"),
    w_pcie_dmai_ready(this, "w_pcie_dmai_ready", "1", "SystemC workaround"),
    wb_reqfifo_payload_i(this, "wb_reqfifo_payload_i", "REQ_FIFO_WIDTH"),
    wb_reqfifo_payload_o(this, "wb_reqfifo_payload_o", "REQ_FIFO_WIDTH"),
    w_reqfifo_wready(this, "w_reqfifo_wready", "1"),
    w_reqfifo_rvalid(this, "w_reqfifo_rvalid", "1"),
    w_reqfifo_rd(this, "w_reqfifo_rd", "1"),
    wb_respfifo_payload_i(this, "wb_respfifo_payload_i", "RESP_FIFO_WIDTH"),
    wb_respfifo_payload_o(this, "wb_respfifo_payload_o", "RESP_FIFO_WIDTH"),
    w_respfifo_wready(this, "w_respfifo_wready", "1"),
    w_respfifo_rvalid(this, "w_respfifo_rvalid", "1"),
    w_respfifo_wr(this, "w_respfifo_wr", "1"),
    wb_m_axis_rx_tuser(this, "wb_m_axis_rx_tuser", "9"),
    w_m_axis_rx_tlast(this, "w_m_axis_rx_tlast", "1"),
    wb_m_axis_rx_tkeep(this, "wb_m_axis_rx_tkeep", "KEEP_WIDTH"),
    wb_m_axis_rx_tdata(this, "wb_m_axis_rx_tdata", "C_DATA_WIDTH"),
    w_s_axis_tx_tlast(this, "w_s_axis_tx_tlast", "1"),
    wb_s_axis_tx_tkeep(this, "wb_s_axis_tx_tkeep", "KEEP_WIDTH"),
    wb_s_axis_tx_tdata(this, "wb_s_axis_tx_tdata", "C_DATA_WIDTH"),
    w_tx_src_dsc(this, "w_tx_src_dsc", "1"),
    w_req_mem_ready(this, "w_req_mem_ready", "1", RSTVAL_ZERO, NO_COMMENT),
    w_req_mem_valid(this, "w_req_mem_valid", "1", RSTVAL_ZERO, NO_COMMENT),
    w_req_mem_64(this, "w_req_mem_64", "1", RSTVAL_ZERO, "0=32-bits; 1=64-bits"),
    w_req_mem_write(this, "w_req_mem_write", "1", RSTVAL_ZERO, "0=read; 1=write operation"),
    wb_req_mem_bytes(this, "wb_req_mem_bytes", "10", RSTVAL_ZERO, "0=1024 B; 4=DWORD; 8=QWORD; ..."),
    wb_req_mem_addr(this, "wb_req_mem_addr", "13", "'0", NO_COMMENT),
    wb_req_mem_strob(this, "wb_req_mem_strob", "8", "'0", NO_COMMENT),
    wb_req_mem_data(this, "wb_req_mem_data", "64", "'0", NO_COMMENT),
    w_req_mem_last(this, "w_req_mem_last", "1", RSTVAL_ZERO, NO_COMMENT),
    wb_resp_mem_data(this, "wb_resp_mem_data", "64", "'0", NO_COMMENT),
    w_resp_mem_valid(this, "w_resp_mem_valid", "1", RSTVAL_ZERO, NO_COMMENT),
    w_resp_mem_fault(this, "w_resp_mem_fault", "1", RSTVAL_ZERO, NO_COMMENT),
    w_resp_mem_ready(this, "w_resp_mem_ready", "1", RSTVAL_ZERO, NO_COMMENT),
    // registers
    //
    comb(this),
    reqfifo(this, "reqfifo"),
    respfifo(this, "respfifo"),
    PIO_EP_inst(this, "PIO_EP_inst", NO_COMMENT),
    xdma0(this, "xdma0", NO_COMMENT)
{
    Operation::start(this);

    TEXT("PCIE EP (200 MHz) -> DMA (40 MHz)");
    reqfifo.abits.setObjValue(SCV_get_cfg_type(this, "CFG_PCIE_DMAFIFO_DEPTH"));
    reqfifo.dbits.setObjValue(&REQ_FIFO_WIDTH);
    NEW(reqfifo, reqfifo.getName().c_str());
        CONNECT(reqfifo, 0, reqfifo.i_nrst, i_nrst);
        CONNECT(reqfifo, 0, reqfifo.i_wclk, i_pcie_phy_clk);
        CONNECT(reqfifo, 0, reqfifo.i_wr, w_pcie_dmai_valid);
        CONNECT(reqfifo, 0, reqfifo.i_wdata, wb_reqfifo_payload_i);
        CONNECT(reqfifo, 0, reqfifo.o_wready, w_reqfifo_wready);
        CONNECT(reqfifo, 0, reqfifo.i_rclk, i_clk);
        CONNECT(reqfifo, 0, reqfifo.i_rd, w_reqfifo_rd);
        CONNECT(reqfifo, 0, reqfifo.o_rdata, wb_reqfifo_payload_o);
        CONNECT(reqfifo, 0, reqfifo.o_rvalid, w_reqfifo_rvalid);
    ENDNEW();

    TEXT("DMA (40 MHz) -> PCIE EP (200 MHz)");
    respfifo.abits.setObjValue(SCV_get_cfg_type(this, "CFG_PCIE_DMAFIFO_DEPTH"));
    respfifo.dbits.setObjValue(&RESP_FIFO_WIDTH);
    NEW(respfifo, respfifo.getName().c_str());
        CONNECT(respfifo, 0, respfifo.i_nrst, i_nrst);
        CONNECT(respfifo, 0, respfifo.i_wclk, i_clk);
        CONNECT(respfifo, 0, respfifo.i_wr, w_respfifo_wr);
        CONNECT(respfifo, 0, respfifo.i_wdata, wb_respfifo_payload_i);
        CONNECT(respfifo, 0, respfifo.o_wready, w_respfifo_wready);
        CONNECT(respfifo, 0, respfifo.i_rclk, i_pcie_phy_clk);
        CONNECT(respfifo, 0, respfifo.i_rd, w_pcie_dmai_ready);
        CONNECT(respfifo, 0, respfifo.o_rdata, wb_respfifo_payload_o);
        CONNECT(respfifo, 0, respfifo.o_rvalid, w_respfifo_rvalid);
    ENDNEW();

TEXT();
    PIO_EP_inst.C_DATA_WIDTH.setObjValue(&C_DATA_WIDTH);
    PIO_EP_inst.KEEP_WIDTH.setObjValue(&KEEP_WIDTH);
    NEW(PIO_EP_inst, PIO_EP_inst.getName().c_str());
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_nrst, i_nrst);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_clk, i_clk);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_s_axis_tx_tready, w_respfifo_wready);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_s_axis_tx_tdata, wb_s_axis_tx_tdata);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_s_axis_tx_tkeep, wb_s_axis_tx_tkeep);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_s_axis_tx_tlast, w_s_axis_tx_tlast);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_s_axis_tx_tvalid, w_respfifo_wr);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_tx_src_dsc, w_tx_src_dsc);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_m_axis_rx_tdata, wb_m_axis_rx_tdata);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_m_axis_rx_tkeep, wb_m_axis_rx_tkeep);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_m_axis_rx_tlast, w_m_axis_rx_tlast);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_m_axis_rx_tvalid, w_reqfifo_rvalid);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_m_axis_rx_tready, w_reqfifo_rd);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_m_axis_rx_tuser, wb_m_axis_rx_tuser);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_cfg_completer_id, i_pcie_completer_id);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_req_mem_ready, w_req_mem_ready);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_req_mem_valid, w_req_mem_valid);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_req_mem_64, w_req_mem_64);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_req_mem_write, w_req_mem_write);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_req_mem_bytes, wb_req_mem_bytes);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_req_mem_addr, wb_req_mem_addr);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_req_mem_strob, wb_req_mem_strob);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_req_mem_data, wb_req_mem_data);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_req_mem_last, w_req_mem_last);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_resp_mem_data, wb_resp_mem_data);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_resp_mem_valid, w_resp_mem_valid);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.i_resp_mem_fault, w_resp_mem_fault);
        CONNECT(PIO_EP_inst, 0, PIO_EP_inst.o_resp_mem_ready, w_resp_mem_ready);
    ENDNEW();

    TEXT();
    xdma0.abits.setObjValue(new DecConst(13));
    xdma0.userbits.setObjValue(new DecConst(1));
    NEW(xdma0, xdma0.getName().c_str());
        CONNECT(xdma0, 0, xdma0.i_nrst, i_nrst);
        CONNECT(xdma0, 0, xdma0.i_clk, i_clk);
        CONNECT(xdma0, 0, xdma0.o_req_mem_ready, w_req_mem_ready);
        CONNECT(xdma0, 0, xdma0.i_req_mem_valid, w_req_mem_valid);
        CONNECT(xdma0, 0, xdma0.i_req_mem_64, w_req_mem_64);
        CONNECT(xdma0, 0, xdma0.i_req_mem_write, w_req_mem_write);
        CONNECT(xdma0, 0, xdma0.i_req_mem_bytes, wb_req_mem_bytes);
        CONNECT(xdma0, 0, xdma0.i_req_mem_addr, wb_req_mem_addr);
        CONNECT(xdma0, 0, xdma0.i_req_mem_strob, wb_req_mem_strob);
        CONNECT(xdma0, 0, xdma0.i_req_mem_data, wb_req_mem_data);
        CONNECT(xdma0, 0, xdma0.i_req_mem_last, w_req_mem_last);
        CONNECT(xdma0, 0, xdma0.o_resp_mem_data, wb_resp_mem_data);
        CONNECT(xdma0, 0, xdma0.o_resp_mem_valid, w_resp_mem_valid);
        CONNECT(xdma0, 0, xdma0.o_resp_mem_fault, w_resp_mem_fault);
        CONNECT(xdma0, 0, xdma0.i_resp_mem_ready, w_resp_mem_ready);
        CONNECT(xdma0, 0, xdma0.i_msti, i_xmsti);
        CONNECT(xdma0, 0, xdma0.o_msto, o_xmsto);
    ENDNEW();


    Operation::start(&comb);
    proc_comb();
}

void pcie_dma::proc_comb() {
    types_amba* amba = glob_types_amba_;
    SETVAL(comb.vb_xmst_cfg.descrsize, glob_pnp_cfg_->PNP_CFG_DEV_DESCR_BYTES);
    SETVAL(comb.vb_xmst_cfg.descrtype, glob_pnp_cfg_->PNP_CFG_TYPE_MASTER);
    SETVAL(comb.vb_xmst_cfg.vid, glob_pnp_cfg_->VENDOR_OPTIMITECH);
    SETVAL(comb.vb_xmst_cfg.did, glob_pnp_cfg_->OPTIMITECH_PCIE_DMA);

    SETVAL(o_xmst_cfg, comb.vb_xmst_cfg);
    
    TEXT();
    SETVAL(o_dma_state, ALLZEROS());

    TEXT_ASSIGN();
    ASSIGN(w_pcie_dmai_valid, i_pcie_dmai.valid);
    ASSIGN(w_pcie_dmai_ready, i_pcie_dmai.ready);

    TEXT();
    TEXT("PCIE PHY clock to system clock AFIFO:");
    ASSIGN(wb_reqfifo_payload_i, CCx(6, &i_pcie_dmai.bar_hit,
                                        &i_pcie_dmai.ecrc_err,
                                        &i_pcie_dmai.err_fwd,
                                        &i_pcie_dmai.last,
                                        &i_pcie_dmai.strob,
                                        &i_pcie_dmai.data));
    TEXT();
    TEXT("SystemC limitation, cannot assign directly to signal:");
    SPLx(wb_reqfifo_payload_o, 4, &comb.vb_m_axis_rx_tuser,
                                  &comb.v_m_axis_rx_tlast,
                                  &comb.vb_m_axis_rx_tkeep,
                                  &comb.vb_m_axis_rx_tdata);
    SETVAL(wb_m_axis_rx_tuser, comb.vb_m_axis_rx_tuser);
    SETVAL(w_m_axis_rx_tlast, comb.v_m_axis_rx_tlast);
    SETVAL(wb_m_axis_rx_tkeep, comb.vb_m_axis_rx_tkeep);
    SETVAL(wb_m_axis_rx_tdata, comb.vb_m_axis_rx_tdata);

TEXT_ASSIGN();
    TEXT_ASSIGN("System Clock to PCIE PHY clock AFIFO:");
    ASSIGN(wb_respfifo_payload_i, CCx(3, &w_s_axis_tx_tlast,
                                         &wb_s_axis_tx_tkeep,
                                         &wb_s_axis_tx_tdata));

TEXT();
    SETVAL(comb.vb_pcie_dmao.valid, w_respfifo_rvalid);
    SETVAL(comb.vb_pcie_dmao.ready, w_reqfifo_wready);
    SPLx(wb_respfifo_payload_o, 3, &comb.vb_pcie_dmao.last,
                                   &comb.vb_pcie_dmao.strob,
                                   &comb.vb_pcie_dmao.data);
    SETVAL(o_pcie_dmao, comb.vb_pcie_dmao);

    ASSIGN(o_dbg_mem_valid, w_req_mem_valid);
    ASSIGN(o_dbg_mem_wren, w_req_mem_write);
    ASSIGN(o_dbg_mem_wstrb, wb_req_mem_strob);
    ASSIGN(o_dbg_mem_addr, wb_req_mem_addr);
    ASSIGN(o_dbg_mem_data, BITS(wb_req_mem_data, 31, 0));
}
